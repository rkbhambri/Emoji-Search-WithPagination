{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","components/EmojiValue/EmojiValue.js","containers/Emoji.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","role","aria-label","Search","type","onChange","event","inputChangeHandler","placeholder","EmojiValue","emojiValue","emojiData","length","map","data","index","key","onClick","navigator","clipboard","writeText","symbol","title","Emoji","state","inputSearchValue","updatedEmojiData","_this","filter","item","toLowerCase","search","target","value","setState","Object","objectSpread","this","EmojiList","_this2","components_Header_Header","components_Search_Search","components_EmojiValue_EmojiValue","Component","App","src_containers_Emoji","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4l3JAeeA,SAZA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACTH,EAAAC,EAAAC,cAAA,QAAME,KAAK,MAAMC,aAAW,UAA5B,gBACAL,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,QAAME,KAAK,MAAMC,aAAW,UAA5B,oBCQDC,EAfA,SAACP,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,SACIK,KAAK,OACLJ,UAAU,eACVK,SAAU,SAACC,GAAD,OAAWV,EAAMW,mBAAmBD,IAC9CE,YAAY,oBCcjBC,SArBI,SAACb,GACnB,IAAMc,EACLd,EAAMe,UAAUC,OAAS,GAAKhB,EAAMe,UAAUE,IAAI,SAACC,EAAMC,GACxD,OACClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBgB,IAAKD,EAAOE,QAAS,kBAAMC,UAAUC,UAAUC,UAAUN,EAAKO,UAClGxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUc,EAAKO,QAD9B,OAEgBxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOc,EAAKQ,OACzCzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,0BAKJ,OACCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbU,MC6BUa,oNAtCdC,MAAQ,CACPb,UAAW,GACXc,iBAAkB,GAClBC,iBAAkB,MAUnBnB,mBAAqB,SAACD,GACrB,IAAIoB,EAAmBC,EAAKH,MAAMb,UAAUiB,OAAO,SAACC,GACnD,OAA8E,IAAvEA,EAAKP,MAAMQ,cAAcC,OAAOzB,EAAM0B,OAAOC,MAAMH,iBAE3DH,EAAKO,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACIR,EAAKH,MADT,CAECC,iBAAkBnB,EAAM0B,OAAOC,MAC/BP,0GAbDW,KAAKH,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACIE,KAAKb,MADT,CAECb,UAAW2B,sCAeJ,IAAAC,EAAAF,KACR,OACCxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdH,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAQlC,mBAAoB,SAACD,GAAD,OAAWiC,EAAKhC,mBAAmBD,MAAUT,EAAAC,EAAAC,cAAA,WACzEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAY/B,UAA2C,KAAhC0B,KAAKb,MAAMC,iBAA0BY,KAAKb,MAAMb,UAAY0B,KAAKb,MAAME,mBAE7D,KAAhCW,KAAKb,MAAMC,kBAAkE,IAAvCY,KAAKb,MAAME,iBAAiBd,QAAgBf,EAAAC,EAAAC,cAAA,wCAjCnE4C,cCOLC,mLARb,OACC/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC8C,EAAD,cAJcF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBrC,WACrBA,UAAUsC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba87dc82.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <p className=\"header-text\" >\n                <span role=\"img\" aria-label=\"Smiley\">ðŸ˜€</span>\n                <span> Emoji Search </span>\n                <span role=\"img\" aria-label=\"Smiley\">ðŸ˜‚</span>\n            </p>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\n\nconst Search = (props) => {\n    return (\n        <div className=\"Emoji-page-wrapper\">\n            <form className=\"form col-md-12\">\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    onChange={(event) => props.inputChangeHandler(event)}\n                    placeholder=\"Search Emoji\"\n                />\n            </form>\n        </div>\n    );\n};\n\nexport default Search;","import React from 'react';\nimport './EmojiValue.css';\n\nconst EmojiValue = (props) => {\n\tconst emojiValue = (\n\t\tprops.emojiData.length > 0 && props.emojiData.map((data, index) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"emoji-value row p-2\" key={index} onClick={() => navigator.clipboard.writeText(data.symbol)}>\n\t\t\t\t\t<h5 className=\"symbol\">{data.symbol}</h5>&nbsp;\n                    <h5 className=\"p-1\">{data.title}</h5>\n\t\t\t\t\t<span className=\"tooltiptext\">Click to copy emoji</span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t})\n\t);\n\treturn (\n\t\t<div className=\"Emoji-list-wrapper col-md-12\">\n\t\t\t<div className=\"emoji-list col-md-12\">\n\t\t\t\t{emojiValue}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default EmojiValue;","import React, { Component } from 'react';\nimport EmojiList from '../emojiData.json';\nimport Header from '../components/Header/Header';\nimport Search from '../components/Search/Search';\nimport EmojiValue from '../components/EmojiValue/EmojiValue';\nimport './Emoji.css';\n\nclass Emoji extends Component {\n\n\tstate = {\n\t\temojiData: [],\n\t\tinputSearchValue: '',\n\t\tupdatedEmojiData: [],\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\temojiData: EmojiList\n\t\t});\n\t};\n\n\tinputChangeHandler = (event) => {\n\t\tlet updatedEmojiData = this.state.emojiData.filter((item) => {\n\t\t\treturn item.title.toLowerCase().search(event.target.value.toLowerCase()) !== -1;\n\t\t});\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tinputSearchValue: event.target.value,\n\t\t\tupdatedEmojiData\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Emoji-page-wrapper\">\n\t\t\t\t<Header />\n\t\t\t\t<Search inputChangeHandler={(event) => this.inputChangeHandler(event)} /><br />\n\t\t\t\t<EmojiValue emojiData={this.state.inputSearchValue === '' ? this.state.emojiData : this.state.updatedEmojiData} />\n\t\t\t\t{\n\t\t\t\t\tthis.state.inputSearchValue !== '' && this.state.updatedEmojiData.length === 0 && <h4>Emoji Not Found !!</h4>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default Emoji;","import React, { Component } from 'react';\nimport './App.css';\nimport Emoji from './containers/Emoji';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Emoji />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}